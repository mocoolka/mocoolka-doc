import * as t from 'io-ts';
import { Either } from 'fp-ts/lib/Either';
export interface JSONLeft<L> {
    type: 'Left';
    value: L;
}
export interface JSONRight<A> {
    type: 'Right';
    value: A;
}
export declare type JSONEither<L, A> = JSONLeft<L> | JSONRight<A>;
export declare class EitherFromJSONType<L extends t.Any, R extends t.Any, A = any, O = A, I = t.mixed> extends t.Type<A, O, I> {
    readonly left: L;
    readonly right: R;
    readonly _tag: 'EitherFromJSONType';
    constructor(name: string, is: EitherFromJSONType<L, R, A, O, I>['is'], validate: EitherFromJSONType<L, R, A, O, I>['validate'], serialize: EitherFromJSONType<L, R, A, O, I>['encode'], left: L, right: R);
}
export declare function createEitherFromJSON<L extends t.Type<AL, OL>, R extends t.Type<AR, OR>, AL = any, OL = AL, AR = any, OR = AR>(leftType: L, rightType: R, name?: string): EitherFromJSONType<L, R, Either<t.TypeOf<L>, t.TypeOf<R>>, JSONEither<t.OutputOf<L>, t.OutputOf<R>>, t.mixed>;
