import * as t from 'io-ts';
import { Option } from 'fp-ts/lib/Option';
export interface JSONOption<A> {
    type: 'Option';
    value: A | null | undefined;
}
export declare class OptionFromJSONType<RT extends t.Any, A = any, O = A, I = t.mixed> extends t.Type<A, O, I> {
    readonly type: RT;
    readonly _tag: 'OptionFromJSONType';
    constructor(name: string, is: OptionFromJSONType<RT, A, O, I>['is'], validate: OptionFromJSONType<RT, A, O, I>['validate'], serialize: OptionFromJSONType<RT, A, O, I>['encode'], type: RT);
}
export declare function createOptionFromJSON<RT extends t.Type<A, O>, A = any, O = A>(type: RT, name?: string): OptionFromJSONType<RT, Option<t.TypeOf<RT>>, JSONOption<t.OutputOf<RT>>, t.mixed>;
