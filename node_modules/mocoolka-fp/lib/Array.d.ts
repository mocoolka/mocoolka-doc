export * from 'fp-ts/lib/Array';
import { Predicate } from 'fp-ts/lib/function';
import { uniq as removeduplicate } from 'lodash';
export { removeduplicate };
export declare const remove: <T>(a: T[], predicate: Predicate<T>) => T[];
/**
 * removes the last element from an array and returns that array.
 * @param a
 */
export declare const deleteLast: (a: any[]) => any[];
/**
 * removes the first element from an array and returns that array.
 * @param a
 */
export declare const deleteFirst: (a: any[]) => any[];
/**
 * move array forward left or right and fill with first or last value
 * @param a
 * @param n
 */
export declare const moveAndFillLeftOrRight: (n: 1 | -1) => (a: any[]) => any[];
export declare const moveAndFillLeft: (a: any[]) => any[];
export declare const moveAndFillRight: (a: any[]) => any[];
export declare const timeSelf: (i: number) => <P>(p: P) => (func: (a: P) => P) => P;
export declare const sliceBefore: <A>(predicate: Predicate<A>) => (as: A[]) => A[];
export declare const sliceAfter: <A>(predicate: Predicate<A>) => (as: A[]) => A[];
export declare const sliceLast: <A>(n: number) => (as: A[]) => A[];
export declare const sliceFirst: <A>(n: number) => (as: A[]) => A[];
export declare const sliceSkip: <A>(n: number) => (as: A[]) => A[];
export declare const groupBy: <A>(a: (b: A) => string) => (as: A[]) => {
    [name: string]: A[];
};
