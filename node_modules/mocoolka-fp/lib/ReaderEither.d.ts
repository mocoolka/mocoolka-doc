import { Either } from './Either';
import { Monad3 } from './Monad';
declare module 'fp-ts/lib/HKT' {
    interface URI2HKT3<U, L, A> {
        ReaderEither: ReaderEither<U, L, A>;
    }
}
export declare const URI = "ReaderEither";
export declare type URI = typeof URI;
export declare class ReaderEither<E, L, A> {
    readonly run: (e: E) => Either<L, A>;
    readonly '_A': A;
    readonly '_L': L;
    readonly '_U': E;
    readonly '_URI': URI;
    constructor(run: (e: E) => Either<L, A>);
    map<B>(f: (a: A) => B): ReaderEither<E, L, B>;
    of<E1, B>(b: B): ReaderEither<E1, L, B>;
    ap<B>(fab: ReaderEither<E, L, (a: A) => B>): ReaderEither<E, L, B>;
    ap_<B, C>(this: ReaderEither<E, L, (b: B) => C>, fb: ReaderEither<E, L, B>): ReaderEither<E, L, C>;
    chain<B>(f: (a: A) => ReaderEither<E, L, B>): ReaderEither<E, L, B>;
}
export declare const ask: <E, L>() => ReaderEither<E, L, E>;
export declare const asks: <E, L, A>(f: (e: E) => A) => ReaderEither<E, L, A>;
export declare const local: <E>(f: (e: E) => E) => <L, A>(fa: ReaderEither<E, L, A>) => ReaderEither<E, L, A>;
export declare const fromEither: <E, L, A>(fa: Either<L, A>) => ReaderEither<E, L, A>;
export declare const alt: <E, L, A>(fx: ReaderEither<E, L, A>, fy: ReaderEither<E, L, A>) => ReaderEither<E, L, A>;
export declare const readerEither: Monad3<URI>;
