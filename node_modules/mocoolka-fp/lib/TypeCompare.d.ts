import * as t from './Type';
import { Predicate } from './function';
export declare type ICompareParams<A extends t.TBasicType, B> = {
    [P in keyof B]: A | A[];
};
export declare const compareParams: {
    [P in t.TBasicType]: ICompareParams<P, any>;
};
export declare const compareArrayParams: {
    [P in t.TBasicType]: ICompareParams<P, any>;
};
export declare const compare: {
    [P in t.TBasicType]: any;
};
export declare const getCompareFunction: (type: string, name: string) => (x: any) => Predicate<string | number | boolean | Date>;
