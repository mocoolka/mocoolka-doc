"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var object_1 = require("./object");
var function_1 = require("./function");
var c = require("./Compare");
/**
 * compose object get function and basic compare function
 * @todo may this is a function.
 */
function composeObjectCompareSingleToSingle(properyName) {
    return function (a) { return function_1.flip(function_1.compose(function_1.flip(a), object_1._get(properyName))); };
}
function composeObjectCompareArrayToSingle(properyName) {
    return function (a) { return function_1.flip(function_1.compose(function_1.flip(a), object_1._get(properyName))); };
}
function composeObjectCompareSingleToArray(properyName) {
    return function (a) { return function (x) { return function (b) { return a(x)(b.map(object_1._get(properyName))); }; }; };
}
function composeObjectCompareArrayToArray(properyName) {
    return function (a) { return function (x) { return function (b) { return a(x)(b.map(object_1._get(properyName))); }; }; };
}
/**
 * compare collection when propery type is boolean
 */
exports.booleanObjectCompare = object_1.mapValues(c.booleanCompare, function (v) {
    return function (properyName) {
        return composeObjectCompareSingleToSingle(properyName)(v);
    };
});
var arrayObjectCompareSingleToArray = object_1.mapValues(c.arrayCompareSingleToArray, function (v) {
    return function (properyName) {
        return composeObjectCompareSingleToArray(properyName)(v);
    };
});
var arrayObjectCompareArrayToArray = object_1.mapValues(c.arrayCompareArrayToArray, function (v) {
    return function (properyName) {
        return composeObjectCompareArrayToArray(properyName)(v);
    };
});
/**
 * compare collection when propery type is array
 */
exports.arrayObjectCompare = __assign({}, arrayObjectCompareSingleToArray, arrayObjectCompareArrayToArray);
var stringObjectCompareS = object_1.mapValues(c.stringCompareS, function (v) {
    return function (properyName) {
        return composeObjectCompareSingleToSingle(properyName)(v);
    };
});
var stringObjectCompareA = object_1.mapValues(c.stringCompareA, function (v) {
    return function (properyName) {
        return composeObjectCompareArrayToSingle(properyName)(v);
    };
});
/**
 * compare collection when propery type is string
 */
exports.stringObjectCompare = __assign({}, stringObjectCompareS, stringObjectCompareA);
/**
 * compare collection when propery type is number
 */
exports.numberObjectCompare = object_1.mapValues(c.numberCompare, function (v) {
    return function (properyName) {
        return composeObjectCompareSingleToSingle(properyName)(v);
    };
});
//# sourceMappingURL=ObjectCompare.js.map