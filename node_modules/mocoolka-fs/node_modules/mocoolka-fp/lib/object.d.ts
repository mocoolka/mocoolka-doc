/// <reference path="../node_modules/@types/lodash/common/common.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/array.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/collection.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/date.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/function.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/lang.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/math.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/number.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/object.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/seq.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/string.d.ts" />
/// <reference path="../node_modules/@types/lodash/common/util.d.ts" />
import { Many, PropertyName } from './TypeLevel';
import { get, merge, pick, mapKeys, omit, mapValues, has } from 'lodash';
export { get, merge, pick, mapKeys, omit, mapValues, has };
import { ObjectDiff } from './TypeLevel';
export declare const moveAndFillRightObject: (a: {}) => {
    [key: string]: any;
};
export declare const withDefaults: <D extends {
    [k: string]: any;
}, A extends D>(defaults: D) => (props?: ObjectDiff<A, D>) => A;
export declare const withDefaultsF: <D extends object, A extends D, R>(defaults: D) => (C: (prop: A) => R) => (props: ObjectDiff<A, D>) => R;
export declare type GetProperty = (propName: Many<PropertyName>) => (a: object) => any;
export declare type ManyPropertyName = Many<PropertyName>;
export declare const _get: <T>(propName: _.Many<string | number | symbol>) => (a: object) => T;
