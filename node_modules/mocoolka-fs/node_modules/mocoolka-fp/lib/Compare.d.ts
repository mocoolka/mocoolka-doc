import { Ord } from './Ord';
import { Predicate } from './function';
export declare type TRuntimeBasicType = string | number | boolean;
/**
 * stand type compare.
 * every type include all methods
 */
export interface TypeCompare<A extends TRuntimeBasicType> {
    eq: (x: A) => Predicate<A>;
    not: (x: A) => Predicate<A>;
    lt: (x: A) => Predicate<A>;
    gt: (x: A) => Predicate<A>;
    lte: (x: A) => Predicate<A>;
    gte: (x: A) => Predicate<A>;
}
/**
 * boolean compare type
 */
export interface TBooleanCompare {
    eq: (v: boolean) => Predicate<boolean>;
    not: (v: boolean) => Predicate<boolean>;
}
/**
 * string compare  when param is string value
 */
export interface TStringCompareS extends TypeCompare<string> {
    contains: (x: string) => Predicate<string>;
    notContains: (x: string) => Predicate<string>;
    startsWith: (x: string) => Predicate<string>;
    endsWith: (x: string) => Predicate<string>;
    notStartsWith: (x: string) => Predicate<string>;
    notEndsWith: (x: string) => Predicate<string>;
}
/**
 * string compare  when param is array<string> value
 */
export interface TStringCompareA {
    in: (x: string[]) => Predicate<string>;
    notIn: (x: string[]) => Predicate<string>;
}
/**
 * string compare collection
 */
export interface TStringCompare extends TStringCompareS, TStringCompareA {
}
/**
 * array compare with param is value
 */
export interface TArrayCompareSingleToArray<A extends TRuntimeBasicType> {
    contains: (v: A) => Predicate<A[]>;
}
/**
 * array compare with param is array
 */
export interface TArrayCompareArrayToArray<A extends TRuntimeBasicType> {
    contains_every: (v: A[]) => Predicate<A[]>;
    contains_some: (v: A[]) => Predicate<A[]>;
}
/**
 * array all compare
 */
export interface TArrayCompare<A extends TRuntimeBasicType> extends TArrayCompareSingleToArray<A>, TArrayCompareArrayToArray<A> {
}
export interface TNumberCompare extends TypeCompare<number> {
}
export declare type TBasicCompareType = {
    string: TStringCompare;
    boolean: TBooleanCompare;
    number: TNumberCompare;
};
/**
 *
 * @instance TypeCompare
 */
export declare const compareT: <T extends TRuntimeBasicType>(a: Ord<T>) => TypeCompare<T>;
export declare const stringCompareS: TStringCompareS;
export declare const stringCompareA: TStringCompareA;
export declare const stringCompare: TStringCompare;
export declare const arrayCompareSingleToArray: TArrayCompareSingleToArray<TRuntimeBasicType>;
export declare const arrayCompareArrayToArray: TArrayCompareArrayToArray<TRuntimeBasicType>;
export declare const arrayCompare: TArrayCompare<TRuntimeBasicType>;
export declare const numberCompare: TNumberCompare;
/**
 * @instance TBooleanCompare
 */
export declare const booleanCompare: TBooleanCompare;
export declare const compare: TBasicCompareType;
