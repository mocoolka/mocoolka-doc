export declare const isPositiveNumberOrZero: (num: number) => boolean;
export declare type Is<A> = (a: any) => a is A;
export declare const getTypeName: (value: any) => any;
export declare const isTypeName: (strTypeName: string) => <T>(a: any) => a is T;
export declare const isArguments: <T>(a: any) => a is T;
export declare const isArray: <T>(a: any) => a is T[];
export declare const isArrayLike: (value: any) => boolean;
export declare const isBoolean: (a: any) => a is boolean;
export declare const isSymbol: (a: any) => a is symbol;
export declare const isDate: Is<Date>;
export declare const isEmpty: (val: any) => boolean;
export declare const isError: (a: any) => a is Error;
export declare const isFinite: (val: any) => boolean;
export declare const isFunction: (a: any) => a is Function;
export declare const isInteger: (val: any) => boolean;
export declare const isIterable: <T>(a: any) => a is Iterable<T>;
export declare const isIterator: <T>(a: any) => a is Iterator<T>;
export declare const isNaN: (val: any) => boolean;
export declare const isNumber: (a: any) => a is number;
export declare const isObject: (a: any) => a is {
    [name: string]: any;
};
export declare type TPlainObject<T> = {
    [name: string]: T;
};
export declare const isPlainObject: <T>(a: any) => a is TPlainObject<T>;
export declare const isRegExp: (a: any) => a is RegExp;
export declare const isSameType: (a: any, b: any) => boolean;
export declare const isString: (a: any) => a is string;
export declare const isTypedArray: (ar: any) => boolean;
export declare const isUndefined: Is<undefined>;
export declare const propExist: (a: {
    [name: string]: any;
}, propName: string) => boolean;
export declare const isNull: (val: any) => val is null;
export declare const isNil: import("fp-ts/lib/function").Refinement<any, null | undefined>;
