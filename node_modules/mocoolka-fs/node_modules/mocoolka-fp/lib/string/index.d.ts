export * from './camelCase';
export * from './concat';
export * from './constants';
export * from './crop';
export * from './empty';
export * from './escapeHtml';
export * from './escapeRegExp';
export * from './escapeUnicode';
export * from './hyphenate';
export * from './lowerCase';
export * from './lpad';
export * from './ltrim';
export * from './quoteString';
export * from './removeNonASCII';
export * from './removeNonWord';
export * from './repeat';
export * from './replace';
export * from './replaceAccents';
export * from './rtrim';
export * from './slugify';
export * from './symbols';
export * from './toString';
export * from './trim';
export * from './truncate';
export * from './unCamelCase';
export * from './unescapeHtml';
export * from './unhyphenate';
export * from './upperCase';
export declare const repeatSpace: (a: number) => string;
export declare const camelCaseToArray: (str: string) => string[];
/**
 * Checks if string ends with specified suffix.
 */
export declare const endsWith: (suffix: string) => (str: string) => boolean;
export declare const notEndsWith: (substring: string) => import("fp-ts/lib/function").Predicate<string>;
/**
 * Searches for a given substring
 * @since v0.1.0
 * @category String
 * @ts String -> String -> Boolean
 * @param {string} substring
 * @param {string} str
 * @return {boolean}
 */
export declare const includes: (str: string, substring: string, fromIndex?: number) => boolean;
export { upperFirst, lowerFirst } from 'lodash';
export declare const contains: (substring: string) => (str: string) => boolean;
export declare const ins: (v: string[]) => (str: string) => boolean;
export declare const notIn: (a: string[]) => (str: string) => boolean;
export declare const notContains: (substring: string) => import("fp-ts/lib/function").Predicate<string>;
/**
 * Checks if string ends with specified suffix.
 */
export declare const startsWith: (suffix: string) => (str: string) => boolean;
export declare const notStartsWith: (substring: string) => import("fp-ts/lib/function").Predicate<string>;
