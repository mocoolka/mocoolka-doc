"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("fp-ts/lib/Ord"));
var Ord_1 = require("fp-ts/lib/Ord");
var Ordering_1 = require("fp-ts/lib/Ordering");
var Ord_2 = require("fp-ts/lib/Ord");
// export const ordDate = fromCompare<Date>((a, b) => ordNumber.compare(a.getTime(), b.getTime()));
exports.ordDescDate = Ord_1.fromCompare(function (a, b) { return Ordering_1.invert(Ord_1.ordDate.compare(a, b)); });
exports.ordDescString = Ord_1.fromCompare(function (a, b) { return Ordering_1.invert(Ord_1.ordString.compare(a, b)); });
exports.ordDescNumber = Ord_1.fromCompare(function (a, b) { return Ordering_1.invert(Ord_1.ordNumber.compare(a, b)); });
exports.ordDescBoolean = Ord_1.fromCompare(function (a, b) { return Ordering_1.invert(Ord_1.ordBoolean.compare(a, b)); });
/**
 * Monoid under array concatenation (`Array<any>`)
 * @instance
 */
exports.getOrdMonoid = function () {
    return (__assign({}, Ord_2.getSemigroup(), { empty: {
            equals: function (a, b) { return true; },
            compare: function (a, b) { return 0; },
        } }));
};
//# sourceMappingURL=Ord.js.map