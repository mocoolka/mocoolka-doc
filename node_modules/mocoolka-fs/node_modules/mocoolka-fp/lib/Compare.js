"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Ord_1 = require("./Ord");
var function_1 = require("./function");
var string_1 = require("./string");
/**
 *
 * @instance TypeCompare
 */
exports.compareT = function (a) { return ({
    eq: function_1.curry(a.equals),
    not: function (v) { return function_1.not(function_1.curry(a.equals)(v)); },
    lt: function_1.flip(function_1.curry(Ord_1.lessThan(a))),
    gt: function_1.flip(function_1.curry(Ord_1.greaterThan(a))),
    lte: function_1.flip(function_1.curry(Ord_1.lessThanOrEq(a))),
    gte: function_1.flip(function_1.curry(Ord_1.greaterThanOrEq(a))),
}); };
exports.stringCompareS = __assign({}, exports.compareT(Ord_1.ordString), { contains: string_1.contains,
    notContains: string_1.notContains,
    startsWith: string_1.startsWith,
    endsWith: string_1.endsWith,
    notStartsWith: string_1.notStartsWith,
    notEndsWith: string_1.notEndsWith });
exports.stringCompareA = {
    in: string_1.ins,
    notIn: string_1.notIn,
};
exports.stringCompare = __assign({}, exports.stringCompareS, exports.stringCompareA);
exports.arrayCompareSingleToArray = ({
    contains: function (c) { return function (value) { return value.includes(c); }; },
});
exports.arrayCompareArrayToArray = ({
    contains_every: function (v) { return function (value) {
        return value.filter(function (a) { return v.includes(a); }).length === value.length;
    }; },
    contains_some: function (v) { return function (value) { return value.filter(function (a) { return v.includes(a); }).length > 0; }; },
});
exports.arrayCompare = __assign({}, exports.arrayCompareSingleToArray, exports.arrayCompareArrayToArray);
exports.numberCompare = exports.compareT(Ord_1.ordNumber);
/**
 * @instance TBooleanCompare
 */
exports.booleanCompare = ({
    eq: function_1.curry(Ord_1.ordBoolean.equals),
    not: function (v) { return function_1.not(function_1.curry(Ord_1.ordBoolean.equals)(v)); },
});
exports.compare = {
    string: exports.stringCompare,
    boolean: exports.booleanCompare,
    number: exports.numberCompare,
};
//# sourceMappingURL=Compare.js.map