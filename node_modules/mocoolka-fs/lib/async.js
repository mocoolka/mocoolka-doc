"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _glob = require("glob");
var fs = require("fs");
var Task_1 = require("mocoolka-fp/lib/Task");
var Monoid_1 = require("mocoolka-fp/lib/Monoid");
var util = require("util");
var glob = util.promisify(_glob);
var readFile = util.promisify(fs.readFile);
var writeFile = util.promisify(fs.writeFile);
var readdir = util.promisify(fs.readdir);
var _stat = util.promisify(fs.stat);
var _exists = util.promisify(fs.exists);
var M = Task_1.getMonoid(Monoid_1.monoidAll);
exports.files = function (name) { return new Task_1.Task(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    switch (_a.label) {
        case 0: return [4, glob(name, { nonull: false })];
        case 1: return [2, _a.sent()];
    }
}); }); }); };
exports.exists = function (path) {
    return new Task_1.Task(function () { return _exists(path); });
};
exports.readDir = function (path) { return new Task_1.Task(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    switch (_a.label) {
        case 0: return [4, readdir(path)];
        case 1: return [2, _a.sent()];
    }
}); }); }); };
exports.directoryExist = function (path) {
    return M.concat(exports.exists(path), exports.stat(path).map(function (a) { return a.isDirectory(); }));
};
exports.stat = function (path) {
    return new Task_1.Task(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { var _a, _b; return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = Object).assign;
                return [4, _stat(path)];
            case 1: return [2, _b.apply(_a, [_c.sent(), { path: path }])];
        }
    }); }); });
};
exports.readFileAsString = function (path) {
    return new Task_1.Task(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, readFile(path, { encoding: 'utf8' })];
            case 1: return [2, _a.sent()];
        }
    }); }); });
};
exports.readFileAsJson = function (path) { return exports.readFileAsString(path).map(JSON.parse); };
exports.writeFileWithString = function (path, contents) {
    return new Task_1.Task(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, writeFile(path, contents, { encoding: 'utf8' })];
            case 1: return [2, _a.sent()];
        }
    }); }); });
};
exports.fileExist = function (path) {
    return M.concat(exports.exists(path), exports.stat(path).map(function (a) { return a.isFile(); }));
};
//# sourceMappingURL=async.js.map